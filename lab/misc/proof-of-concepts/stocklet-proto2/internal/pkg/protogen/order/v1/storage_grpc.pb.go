// Copyright (C) 2024 Declan Teevan
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stocklet/order/v1/storage.proto

package order_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrderStorageService_GetOrder_FullMethodName          = "/stocklet.order.v1.OrderStorageService/GetOrder"
	OrderStorageService_CreateOrder_FullMethodName       = "/stocklet.order.v1.OrderStorageService/CreateOrder"
	OrderStorageService_UpdateOrder_FullMethodName       = "/stocklet.order.v1.OrderStorageService/UpdateOrder"
	OrderStorageService_DeleteOrder_FullMethodName       = "/stocklet.order.v1.OrderStorageService/DeleteOrder"
	OrderStorageService_GetOrderItems_FullMethodName     = "/stocklet.order.v1.OrderStorageService/GetOrderItems"
	OrderStorageService_SetOrderItems_FullMethodName     = "/stocklet.order.v1.OrderStorageService/SetOrderItems"
	OrderStorageService_DeleteOrderItem_FullMethodName   = "/stocklet.order.v1.OrderStorageService/DeleteOrderItem"
	OrderStorageService_GetCustomerOrders_FullMethodName = "/stocklet.order.v1.OrderStorageService/GetCustomerOrders"
)

// OrderStorageServiceClient is the client API for OrderStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderStorageServiceClient interface {
	GetOrder(ctx context.Context, in *DbGetOrderRequest, opts ...grpc.CallOption) (*DbGetOrderResponse, error)
	CreateOrder(ctx context.Context, in *DbCreateOrderRequest, opts ...grpc.CallOption) (*DbCreateOrderResponse, error)
	UpdateOrder(ctx context.Context, in *DbUpdateOrderRequest, opts ...grpc.CallOption) (*DbUpdateOrderResponse, error)
	DeleteOrder(ctx context.Context, in *DbDeleteOrderRequest, opts ...grpc.CallOption) (*DbDeleteOrderResponse, error)
	GetOrderItems(ctx context.Context, in *DbGetOrderItemsRequest, opts ...grpc.CallOption) (*DbGetOrderItemsResponse, error)
	SetOrderItems(ctx context.Context, in *DbSetOrderItemsRequest, opts ...grpc.CallOption) (*DbSetOrderItemsResponse, error)
	DeleteOrderItem(ctx context.Context, in *DbDeleteOrderItemRequest, opts ...grpc.CallOption) (*DbDeleteOrderItemResponse, error)
	GetCustomerOrders(ctx context.Context, in *DbGetCustomerOrdersRequest, opts ...grpc.CallOption) (*DbGetCustomerOrdersResponse, error)
}

type orderStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderStorageServiceClient(cc grpc.ClientConnInterface) OrderStorageServiceClient {
	return &orderStorageServiceClient{cc}
}

func (c *orderStorageServiceClient) GetOrder(ctx context.Context, in *DbGetOrderRequest, opts ...grpc.CallOption) (*DbGetOrderResponse, error) {
	out := new(DbGetOrderResponse)
	err := c.cc.Invoke(ctx, OrderStorageService_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStorageServiceClient) CreateOrder(ctx context.Context, in *DbCreateOrderRequest, opts ...grpc.CallOption) (*DbCreateOrderResponse, error) {
	out := new(DbCreateOrderResponse)
	err := c.cc.Invoke(ctx, OrderStorageService_CreateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStorageServiceClient) UpdateOrder(ctx context.Context, in *DbUpdateOrderRequest, opts ...grpc.CallOption) (*DbUpdateOrderResponse, error) {
	out := new(DbUpdateOrderResponse)
	err := c.cc.Invoke(ctx, OrderStorageService_UpdateOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStorageServiceClient) DeleteOrder(ctx context.Context, in *DbDeleteOrderRequest, opts ...grpc.CallOption) (*DbDeleteOrderResponse, error) {
	out := new(DbDeleteOrderResponse)
	err := c.cc.Invoke(ctx, OrderStorageService_DeleteOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStorageServiceClient) GetOrderItems(ctx context.Context, in *DbGetOrderItemsRequest, opts ...grpc.CallOption) (*DbGetOrderItemsResponse, error) {
	out := new(DbGetOrderItemsResponse)
	err := c.cc.Invoke(ctx, OrderStorageService_GetOrderItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStorageServiceClient) SetOrderItems(ctx context.Context, in *DbSetOrderItemsRequest, opts ...grpc.CallOption) (*DbSetOrderItemsResponse, error) {
	out := new(DbSetOrderItemsResponse)
	err := c.cc.Invoke(ctx, OrderStorageService_SetOrderItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStorageServiceClient) DeleteOrderItem(ctx context.Context, in *DbDeleteOrderItemRequest, opts ...grpc.CallOption) (*DbDeleteOrderItemResponse, error) {
	out := new(DbDeleteOrderItemResponse)
	err := c.cc.Invoke(ctx, OrderStorageService_DeleteOrderItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStorageServiceClient) GetCustomerOrders(ctx context.Context, in *DbGetCustomerOrdersRequest, opts ...grpc.CallOption) (*DbGetCustomerOrdersResponse, error) {
	out := new(DbGetCustomerOrdersResponse)
	err := c.cc.Invoke(ctx, OrderStorageService_GetCustomerOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderStorageServiceServer is the server API for OrderStorageService service.
// All implementations must embed UnimplementedOrderStorageServiceServer
// for forward compatibility
type OrderStorageServiceServer interface {
	GetOrder(context.Context, *DbGetOrderRequest) (*DbGetOrderResponse, error)
	CreateOrder(context.Context, *DbCreateOrderRequest) (*DbCreateOrderResponse, error)
	UpdateOrder(context.Context, *DbUpdateOrderRequest) (*DbUpdateOrderResponse, error)
	DeleteOrder(context.Context, *DbDeleteOrderRequest) (*DbDeleteOrderResponse, error)
	GetOrderItems(context.Context, *DbGetOrderItemsRequest) (*DbGetOrderItemsResponse, error)
	SetOrderItems(context.Context, *DbSetOrderItemsRequest) (*DbSetOrderItemsResponse, error)
	DeleteOrderItem(context.Context, *DbDeleteOrderItemRequest) (*DbDeleteOrderItemResponse, error)
	GetCustomerOrders(context.Context, *DbGetCustomerOrdersRequest) (*DbGetCustomerOrdersResponse, error)
	mustEmbedUnimplementedOrderStorageServiceServer()
}

// UnimplementedOrderStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderStorageServiceServer struct {
}

func (UnimplementedOrderStorageServiceServer) GetOrder(context.Context, *DbGetOrderRequest) (*DbGetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderStorageServiceServer) CreateOrder(context.Context, *DbCreateOrderRequest) (*DbCreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderStorageServiceServer) UpdateOrder(context.Context, *DbUpdateOrderRequest) (*DbUpdateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedOrderStorageServiceServer) DeleteOrder(context.Context, *DbDeleteOrderRequest) (*DbDeleteOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedOrderStorageServiceServer) GetOrderItems(context.Context, *DbGetOrderItemsRequest) (*DbGetOrderItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderItems not implemented")
}
func (UnimplementedOrderStorageServiceServer) SetOrderItems(context.Context, *DbSetOrderItemsRequest) (*DbSetOrderItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrderItems not implemented")
}
func (UnimplementedOrderStorageServiceServer) DeleteOrderItem(context.Context, *DbDeleteOrderItemRequest) (*DbDeleteOrderItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderItem not implemented")
}
func (UnimplementedOrderStorageServiceServer) GetCustomerOrders(context.Context, *DbGetCustomerOrdersRequest) (*DbGetCustomerOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerOrders not implemented")
}
func (UnimplementedOrderStorageServiceServer) mustEmbedUnimplementedOrderStorageServiceServer() {}

// UnsafeOrderStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderStorageServiceServer will
// result in compilation errors.
type UnsafeOrderStorageServiceServer interface {
	mustEmbedUnimplementedOrderStorageServiceServer()
}

func RegisterOrderStorageServiceServer(s grpc.ServiceRegistrar, srv OrderStorageServiceServer) {
	s.RegisterService(&OrderStorageService_ServiceDesc, srv)
}

func _OrderStorageService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbGetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStorageServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStorageService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStorageServiceServer).GetOrder(ctx, req.(*DbGetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStorageService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbCreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStorageServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStorageService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStorageServiceServer).CreateOrder(ctx, req.(*DbCreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStorageService_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbUpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStorageServiceServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStorageService_UpdateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStorageServiceServer).UpdateOrder(ctx, req.(*DbUpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStorageService_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbDeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStorageServiceServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStorageService_DeleteOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStorageServiceServer).DeleteOrder(ctx, req.(*DbDeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStorageService_GetOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbGetOrderItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStorageServiceServer).GetOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStorageService_GetOrderItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStorageServiceServer).GetOrderItems(ctx, req.(*DbGetOrderItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStorageService_SetOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbSetOrderItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStorageServiceServer).SetOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStorageService_SetOrderItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStorageServiceServer).SetOrderItems(ctx, req.(*DbSetOrderItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStorageService_DeleteOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbDeleteOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStorageServiceServer).DeleteOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStorageService_DeleteOrderItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStorageServiceServer).DeleteOrderItem(ctx, req.(*DbDeleteOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderStorageService_GetCustomerOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbGetCustomerOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStorageServiceServer).GetCustomerOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderStorageService_GetCustomerOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStorageServiceServer).GetCustomerOrders(ctx, req.(*DbGetCustomerOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderStorageService_ServiceDesc is the grpc.ServiceDesc for OrderStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stocklet.order.v1.OrderStorageService",
	HandlerType: (*OrderStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _OrderStorageService_GetOrder_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _OrderStorageService_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _OrderStorageService_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _OrderStorageService_DeleteOrder_Handler,
		},
		{
			MethodName: "GetOrderItems",
			Handler:    _OrderStorageService_GetOrderItems_Handler,
		},
		{
			MethodName: "SetOrderItems",
			Handler:    _OrderStorageService_SetOrderItems_Handler,
		},
		{
			MethodName: "DeleteOrderItem",
			Handler:    _OrderStorageService_DeleteOrderItem_Handler,
		},
		{
			MethodName: "GetCustomerOrders",
			Handler:    _OrderStorageService_GetCustomerOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocklet/order/v1/storage.proto",
}
