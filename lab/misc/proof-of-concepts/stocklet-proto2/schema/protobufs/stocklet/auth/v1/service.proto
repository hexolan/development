// Copyright 2024 Declan Teevan
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package stocklet.auth.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/visibility.proto";
import "stocklet/auth/v1/types.proto";

option go_package = "github.com/hexolan/stocklet/internal/pkg/protogen/auth/v1;auth_v1";

service AuthService {
  rpc GetJwks(GetJwksRequest) returns (GetJwksResponse) {
    option (google.api.http) = {get: "/v1/auth/jwks"};
  }

  rpc LoginPassword(LoginPasswordRequest) returns (LoginPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }

  rpc SetPassword(SetPasswordRequest) returns (SetPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/password"
      body: "*"
    };
  }

  // internal method
  rpc DeleteUserData(DeleteUserDataRequest) returns (DeleteUserDataResponse) {
    option (google.api.method_visibility).restriction = "INTERNAL";
  }
}

message GetJwksRequest {}

message GetJwksResponse {
  repeated ECPublicJWK keys = 1;
}

message LoginPasswordRequest {
  string user_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).string.min_len = 1
  ];

  string password = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).string = {
      min_len: 1;
      max_len: 64;
    }
  ];
}

message LoginPasswordResponse {
  string detail = 1;
  AuthToken data = 2;
}

message SetPasswordRequest {
  string user_id = 1 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).string.min_len = 1
  ];

  string password = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).string = {
      min_len: 1;
      max_len: 64;
    }
  ];
}

message SetPasswordResponse {
  string detail = 1;
}

// todo:
// Internal Request Payloads
message DeleteUserDataRequest {}
message DeleteUserDataResponse {}
