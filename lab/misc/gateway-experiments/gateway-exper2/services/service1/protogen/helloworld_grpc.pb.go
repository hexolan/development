// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: testing/servicev1/helloworld.proto

package protogen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Experiment1Service_SayHello_FullMethodName = "/testing.service1.Experiment1Service/SayHello"
)

// Experiment1ServiceClient is the client API for Experiment1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Experiment1ServiceClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type experiment1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperiment1ServiceClient(cc grpc.ClientConnInterface) Experiment1ServiceClient {
	return &experiment1ServiceClient{cc}
}

func (c *experiment1ServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Experiment1Service_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Experiment1ServiceServer is the server API for Experiment1Service service.
// All implementations must embed UnimplementedExperiment1ServiceServer
// for forward compatibility
type Experiment1ServiceServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedExperiment1ServiceServer()
}

// UnimplementedExperiment1ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExperiment1ServiceServer struct {
}

func (UnimplementedExperiment1ServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedExperiment1ServiceServer) mustEmbedUnimplementedExperiment1ServiceServer() {}

// UnsafeExperiment1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Experiment1ServiceServer will
// result in compilation errors.
type UnsafeExperiment1ServiceServer interface {
	mustEmbedUnimplementedExperiment1ServiceServer()
}

func RegisterExperiment1ServiceServer(s grpc.ServiceRegistrar, srv Experiment1ServiceServer) {
	s.RegisterService(&Experiment1Service_ServiceDesc, srv)
}

func _Experiment1Service_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Experiment1ServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Experiment1Service_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Experiment1ServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Experiment1Service_ServiceDesc is the grpc.ServiceDesc for Experiment1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Experiment1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testing.service1.Experiment1Service",
	HandlerType: (*Experiment1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Experiment1Service_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testing/servicev1/helloworld.proto",
}
