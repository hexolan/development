# Compose w/ Debezium
version: "3.8"

services:
  test-service:
    image: hexolan/test-service
    build: 
      context: ./service
      dockerfile: service.Dockerfile
    ports:
      - 90:90
      - 9090:9090
    depends_on:
      kafka:
        condition: service_healthy
      test-service-migrations:
        condition: service_completed_successfully
      dbzcfg:
        condition: service_completed_successfully

  dbzcfg:
    image: hexolan/dbzcfg
    build: 
      context: ./service
      dockerfile: dbzcfg.Dockerfile
    depends_on:
      debezium:
        condition: service_healthy
      test-service-migrations:
        condition: service_completed_successfully

  test-service-postgres:
    image: postgres:16-bookworm
    restart: unless-stopped
    environment:
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    command: ["postgres", "-c", "wal_level=logical"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 30s
    volumes:
      - test-service-postgres-volume:/var/lib/postgresql

  test-service-migrations:
    image: migrate/migrate:4
    command: "-path=/migrations -database postgresql://postgres:postgres@test-service-postgres:5432/postgres?sslmode=disable up"
    volumes:
      - ./migrations:/migrations
    depends_on:
      test-service-postgres:
        condition: service_healthy

  kafka:
    image: bitnami/kafka:3.4
    restart: unless-stopped
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=CONTROLLER://:19093,INTERNAL://:19092,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:19092,EXTERNAL://localhost:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:19093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_KRAFT_CLUSTER_ID=g9rbXaCaSGqB3CURPeEvTA
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - kafka-volume:/bitnami/kafka

  # Debezium Toolings
  debezium:
    image: debezium/connect:latest
    restart: unless-stopped
    environment:
      # Kafka
      BOOTSTRAP_SERVERS: kafka:19092
      GROUP_ID: 0
      CONFIG_STORAGE_TOPIC: debezium-config
      STATUS_STORAGE_TOPIC: debezium-status
      OFFSET_STORAGE_TOPIC: debezium-offset
      
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter

      CONNECT_TOPIC_CREATION_ENABLE: "true"

      # CONNECT_CONNECTOR_CLASS: io.debezium.connector.postgresql.PostgresConnector
      # CONNECT_DATABASE_HOSTNAME: test-service-postgres
      # CONNECT_DATABASE_PORT: "5432"
      # CONNECT_DATABASE_USER: postgres
      # CONNECT_DATABASE_PASSWORD: postgres
      # CONNECT_DATABASE_DBNAME: postgres
      # CONNECT_DATABASE_SERVER_NAME: "databasething"

      # CONNECT_SCHEMA_INCLUDE_LIST: "common"
      # CONNECT_TABLE_INCLUDE_LIST: "common.event_outbox"
      # CONNECT_TOMBSTONES_ON_DELETE: "false"

      # CONNECT_PLUGIN_NAME: pgoutput

      # CONNECT_TRANSFORMS: outbox
      # CONNECT_TRANSFORMS_OUTBOX_TYPE: io.debezium.transforms.outbox.EventRouter
      # CONNECT_TRANSFORMS_OUTBOX_ROUTE_BY_FIELD: topic
      # CONNECT_TRANSFORMS_OUTBOX_TABLE_EXPAND_JSON_PAYLOAD: "true"
      # CONNECT_TRANSFORMS_OUTBOX_ROUTE_TOPIC_REPLACEMENT: \$\{routedByValue\}
    ports:
      - 8083:8083
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "-X", "GET", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      test-service-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  # Dev Toolings
  dev-kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    environment:
      KAFKA_CLUSTERS_0_NAME: "kafka"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:19092"
      DYNAMIC_CONFIG_ENABLED: "true"
    ports:
      - 8080:8080

  dev-adminer:
    image: adminer:latest
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: "test-service-postgres:5432"
    ports:
      - 8081:8080

  dev-debezium-ui:
    image: debezium/debezium-ui:latest
    restart: unless-stopped
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    ports:
      - 8082:8080
    depends_on:
      debezium:
        condition: service_healthy

volumes:
  kafka-volume:
  test-service-postgres-volume: