// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stocklet/shipping/v1/service.proto

package shipping_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShippingService_GetShippingDetails_FullMethodName   = "/stocklet.shipping.v1.ShippingService/GetShippingDetails"
	ShippingService_UpdateShippingStatus_FullMethodName = "/stocklet.shipping.v1.ShippingService/UpdateShippingStatus"
	ShippingService_NewShippingOrder_FullMethodName     = "/stocklet.shipping.v1.ShippingService/NewShippingOrder"
)

// ShippingServiceClient is the client API for ShippingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingServiceClient interface {
	GetShippingDetails(ctx context.Context, in *GetShippingDetailsRequest, opts ...grpc.CallOption) (*GetShippingDetailsResponse, error)
	UpdateShippingStatus(ctx context.Context, in *UpdateShippingStatusRequest, opts ...grpc.CallOption) (*UpdateShippingStatusResponse, error)
	// todo: as internal method - find annotations
	NewShippingOrder(ctx context.Context, in *NewShippingOrderRequest, opts ...grpc.CallOption) (*NewShippingOrderResponse, error)
}

type shippingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingServiceClient(cc grpc.ClientConnInterface) ShippingServiceClient {
	return &shippingServiceClient{cc}
}

func (c *shippingServiceClient) GetShippingDetails(ctx context.Context, in *GetShippingDetailsRequest, opts ...grpc.CallOption) (*GetShippingDetailsResponse, error) {
	out := new(GetShippingDetailsResponse)
	err := c.cc.Invoke(ctx, ShippingService_GetShippingDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) UpdateShippingStatus(ctx context.Context, in *UpdateShippingStatusRequest, opts ...grpc.CallOption) (*UpdateShippingStatusResponse, error) {
	out := new(UpdateShippingStatusResponse)
	err := c.cc.Invoke(ctx, ShippingService_UpdateShippingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) NewShippingOrder(ctx context.Context, in *NewShippingOrderRequest, opts ...grpc.CallOption) (*NewShippingOrderResponse, error) {
	out := new(NewShippingOrderResponse)
	err := c.cc.Invoke(ctx, ShippingService_NewShippingOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingServiceServer is the server API for ShippingService service.
// All implementations must embed UnimplementedShippingServiceServer
// for forward compatibility
type ShippingServiceServer interface {
	GetShippingDetails(context.Context, *GetShippingDetailsRequest) (*GetShippingDetailsResponse, error)
	UpdateShippingStatus(context.Context, *UpdateShippingStatusRequest) (*UpdateShippingStatusResponse, error)
	// todo: as internal method - find annotations
	NewShippingOrder(context.Context, *NewShippingOrderRequest) (*NewShippingOrderResponse, error)
	mustEmbedUnimplementedShippingServiceServer()
}

// UnimplementedShippingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShippingServiceServer struct {
}

func (UnimplementedShippingServiceServer) GetShippingDetails(context.Context, *GetShippingDetailsRequest) (*GetShippingDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShippingDetails not implemented")
}
func (UnimplementedShippingServiceServer) UpdateShippingStatus(context.Context, *UpdateShippingStatusRequest) (*UpdateShippingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShippingStatus not implemented")
}
func (UnimplementedShippingServiceServer) NewShippingOrder(context.Context, *NewShippingOrderRequest) (*NewShippingOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewShippingOrder not implemented")
}
func (UnimplementedShippingServiceServer) mustEmbedUnimplementedShippingServiceServer() {}

// UnsafeShippingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingServiceServer will
// result in compilation errors.
type UnsafeShippingServiceServer interface {
	mustEmbedUnimplementedShippingServiceServer()
}

func RegisterShippingServiceServer(s grpc.ServiceRegistrar, srv ShippingServiceServer) {
	s.RegisterService(&ShippingService_ServiceDesc, srv)
}

func _ShippingService_GetShippingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).GetShippingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_GetShippingDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).GetShippingDetails(ctx, req.(*GetShippingDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_UpdateShippingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShippingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).UpdateShippingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_UpdateShippingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).UpdateShippingStatus(ctx, req.(*UpdateShippingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_NewShippingOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewShippingOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).NewShippingOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_NewShippingOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).NewShippingOrder(ctx, req.(*NewShippingOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingService_ServiceDesc is the grpc.ServiceDesc for ShippingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stocklet.shipping.v1.ShippingService",
	HandlerType: (*ShippingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShippingDetails",
			Handler:    _ShippingService_GetShippingDetails_Handler,
		},
		{
			MethodName: "UpdateShippingStatus",
			Handler:    _ShippingService_UpdateShippingStatus_Handler,
		},
		{
			MethodName: "NewShippingOrder",
			Handler:    _ShippingService_NewShippingOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stocklet/shipping/v1/service.proto",
}
