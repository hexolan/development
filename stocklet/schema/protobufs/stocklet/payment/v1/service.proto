syntax = "proto3";

package stocklet.payment.v1;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/visibility.proto";
import "stocklet/order/v1/events.proto";

option go_package = "github.com/hexolan/stocklet/internal/pkg/protogen/payment/v1;payment_v1";

message GetBalanceRequest {}
message GetBalanceResponse {
  string user_id = 1;
  float balance = 2;
}

// todo: find proper marking - these are internal methods (not exposed by grpc-gateway)
// also allows the possibility for implementing orchestrators
// simplifies event consumers - just call these internally (similar to grpc-gateway but as a sort of grpc event gateway)
// event recieved -> MakePaymentRequest
// response: paid -> success event
//  success event: contains payment_id
// response: failure -> failure event
message MakePaymentRequest {
  string order_id = 1;
  float amount = 2;
}

message MakePaymentResponse {
  string payment_id = 1;
}

message ReversePaymentRequest {
  string payment_id = 1;
}

message ReversePaymentResponse {
  bool success = 1;
}

// Internal Request Payload
message DeleteUserDataRequest {
  string user_id = 1;
}

message DeleteUserDataResponse {}

service PaymentService {
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {
    option (google.api.http) = {
      get: "/v1/payment/balance"
    };
  }

  // todo: find correct annotations to mark these are internal
  rpc MakePayment(MakePaymentRequest) returns (MakePaymentResponse) {
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  rpc ReversePayment(ReversePaymentRequest) returns (ReversePaymentResponse) {
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // internal method
  // todo: return all balance to cards, etc...
  // maybe retain transaction log? just set user_id to nullable in transaction log
  rpc DeleteUserData(DeleteUserDataRequest) returns (DeleteUserDataResponse) {
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Internal Method
  //
  // Processes PlaceOrderEvents.
  // > If an event is recieved from the stage before this service's stage,
  //   then the service will attempt to complete its stage of the saga.
  //    > In this case, payment will attempt to be reserved for the order.
  //    > The success/failure of this action is dispatched as another PlaceOrderEvent.
  //
  // > If an event is recieved from after this service's stage of the saga,
  //   and has a failure status, then compensationary action is taken.
  //    > In this case, payment taken for the order is refunded.
  //
  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  rpc ProcessPlaceOrderEvent(stocklet.order.v1.PlaceOrderEvent) returns (google.protobuf.Empty) {
    option (google.api.method_visibility).restriction = "INTERNAL";
  }
}
