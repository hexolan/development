@page "/account/register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Formulator | Registration</PageTitle>

<div class="hero min-h-screen bg-base-200">
    <div class="hero-content flex-col lg:flex-row-reverse">
        <StatusMessage Message="@Message" />

        <div class="text-center lg:text-left lg:ml-5">
            <h1 class="text-4xl font-bold">Register for Formulator</h1>
            <p class="py-6">
                <span class="font-medium">Already have an account?</span>
                <br />
                <a class="link link-hover" href="/account/login">Login instead.</a>
            </p>
        </div>

        <div class="card shrink-0 w-full max-w-sm shadow-2xl bg-base-100">
            <EditForm class="card-body" Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-red-500" role="alert" />

                <div class="form-control">
                    <label class="label label-text">Display Name</label>
                    <InputText type="text" @bind-Value="Input.DisplayName" class="input input-bordered" aria-required="true" placeholder="name" />
                    <ValidationMessage For="() => Input.DisplayName" class="text-red-500" />
                </div>

                <div class="form-control">
                    <label class="label label-text">Email</label>
                    <InputText type="email" @bind-Value="Input.Email" class="input input-bordered" autocomplete="username" aria-required="true" placeholder="email" />
                    <ValidationMessage For="() => Input.Email" class="text-red-500" />
                </div>

                <div class="columns-2">
                    <div class="form-control">
                        <label class="label label-text">Password</label>
                        <InputText type="password" @bind-Value="Input.Password" class="input input-bordered" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <ValidationMessage For="() => Input.Password" class="text-red-500" />
                    </div>
                    <div class="form-control">
                        <label class="label label-text">Confirm Password</label>
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="input input-bordered" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-500" />
                    </div>
                </div>

                <div class="form-control mt-6">
                    <button class="btn btn-secondary" type="submit">Register</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        // todo:
        // adding display name to user

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Display Name")]
        [StringLength(70, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
        public string DisplayName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
