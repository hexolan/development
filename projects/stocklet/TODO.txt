[*] fix and improve protobuf schemas
    > https://protobuf.dev/programming-guides/dos-donts/
    > common protobuf types such as address

[*] separate structs for database objects
    > convert from db struct to protobuf format
    > converting from protobuf to db object | then storing with that db object

[*] separation of update methods. e.g. UpdateOrder
    > UpdateOrder
        > calls individual update methods? (also makes validation simpler)

        > UpdateOrderAddress (example, maybe something else updatable)
        > UpdateOrderStatus
            * dispatches its own OrderStatusEvent in 'order.state.status'

[*] stop worrying about gRPC-gateway until after

[*] implementing paginations
    > ORDER BY id OR timestamp
    > using LIMIT and OFFSET for pagination functionality
    > checking returned row count to determine if further pagination is possible
    > pagination tokens (as described in pb docs https://protobuf.dev/programming-guides/api/)

[*] protobuf documentation
    > https://protobuf.dev/programming-guides/api/#precisely-concisely

[*] for now don't implement too many service methods - only implement whats needed for the minimum viable product
    > just realised i've wasted too much time implementing methods like UpdateOrder, when they aren't needed yet
    > can be implemented down the line - the key focus of this project is event-driven architecture, so I should get to implementing
        sagas
    > really just want this project in a somewhat complete stage at this point - feels too long has been spent on it

---

missing stage:

* price products (get total)
* get shipping quote

TODO:
checking the scan value of monetary type from postgres (payment svc migrations)
and product 

todo: on user delete
move balance to a closed balances table with email

if new user or user changed email to that email - move that closed balance to a new user balance

-------
=======
-------

Warehouse Service:
	OrderPendingEvent (to start SAGA)
	-> StockReservationEvent (produces)
	ShipmentAllocatedEvent (for failure)
	PaymentProcessedEvent (for failure)
	>>>>> StockReservationEvent (returned)

Shipping Service:
	StockReservationEvent (init)
	-> ShipmentAllocatedEvent (produces)
	PaymentProcessedEvent (for failure)
	>>>>> ShipmentAllocatedEvent (allocation released)

Payment Service:
	ShipmentAllocatedEvent (init)
	PaymentProcessedEvent (produces)